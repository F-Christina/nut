{
  "name": "Nut",
  "tagline": "Docker Nut: the development environment, containerized.",
  "body": "### Wetting Your Appetite\r\nHave you ever experienced headache to install libraries and dependencies?  \r\nEver had to deal with two incompatible versions of a program at once?  \r\nEver wished to try out a new language first, and install it only if it pleases you?  \r\nEver wished to develop for Linux when you use Mac OS or Windows?  \r\nEver wished to develop in Go from the folder of your choice?  \r\nEver wished to have a unified development tool, across all platforms, customizable to any languages?  \r\n\r\n### Nut\r\n**Nut** is a command line tool which offers a solution to common frustrations of developers. It hides the complexity of development environments, and extends them with customizable macros. Whether you develop in Swift, Go, Java, or C++, what you need is build/run/test the app. So just do it:\r\n\r\n    $ nut build\r\n    $ nut run\r\n    $ nut test\r\n\r\n**Nut** mounts the current folder in a [Docker](https://www.docker.com/) container, and executes commands on your behalf, according to the project configuration. The configuration is read from `nut.yml` file, in the current folder. You can choose the Docker image to use, declare volumes to mount, and define commands (called macros) such as *build*, *run*, and *test*.\r\n\r\n### Nut File Syntax\r\n#### Example\r\nHere is an example of `nut.yml` to develop in Go. You can generate a sample configuration with  :\r\n\r\n`nut --init`\r\n```yaml\r\n# nut.yml\r\nproject_name: nut\r\nbased_on:  # configuration can be inherited from:\r\n  url: https://raw.githubusercontent.com/matthieudelaro/donut/master/go/nut.yml  # a URL (soon)\r\n       # parameters set in this file will override basic configuration\r\n  github: matthieudelaro/myenvironment  # a GitHub repository (soon)\r\n  path: /home/matthieudelaro/environments/go/nut.yml  # a local file (soon)\r\n  docker_image: golang:1.6  # directly from a Docker image\r\nmount:  # declares folder to mount in the container\r\n  main:  # give each folder any name that you like\r\n  - .               # this folder (from your computer) will be mounted as\r\n  - /go/src/project # this folder (in the container)\r\nmacros:  # macros define operations the Nut can perform\r\n  build:  # call this one with \"nut build\"\r\n    usage: build the project\r\n    actions:  # a list of commands to run in the container\r\n    - go build -o nut\r\n  run:  # call this one with \"nut build\"\r\n    usage: run the project in the container\r\n    actions:\r\n    - ./nut\r\ncontainer_working_directory: /go/src/project  # container folder in which macros will be executed\r\nsyntax_version: \"2\"  # Nut evolves quickly, its configuration file syntax as well,\r\n                     # so nut files are versioned to ensure backward compatibility.\r\n```\r\n#### Guidelines\r\nNut aims to unify development tools, not to replace compilers.\r\nNut aims to unify development processes, not to expose language specific requirements.\r\n\r\nSo, when creating a `nut.yml` file, one should standard names for macros, such as:\r\n- build\r\n- run\r\n- test\r\n- debug\r\n- deploy\r\n\r\nAs opposed to:\r\n- javac (should be generalized with *run*)\r\n- make (duplicate of *build*)\r\n- do (hum... *Do* what?)\r\nThis will keep Nut easy to integrate in text editors and IDEs.\r\n\r\n### What the Nut???\r\nAchieved with Nut:  \r\n- use Caffe with `nut checkModelDefinition`, `nut train`, `nut test`.\r\n- compile CUDA code on a Mac Book Air, which has not any Nvidia GPU. Just `nut build`\r\n- test code in a whole infrastructure, by defining a macro running *docker-compose* in a container.\r\n\r\n### Milestones\r\n- add support for port bindings\r\n- `nut --init` project configuration from a GitHub repository\r\n- plugin for Sublime Text, to call `nut run`, `nut build`, and `nut test` from the editor.\r\n\r\n### Stay Tune\r\nWanna receive updates? Or share your thoughts? Please tell us on the [form](https://docs.google.com/forms/d/1reDwa7t2-8o_vPGuYg6QBCYHoDdge80dDbkBS9H72nM/viewform).\r\n\r\n### Authors and Contributors\r\n@matthieudelaro and @gdevillele\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}