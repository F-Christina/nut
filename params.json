{
  "name": "Nut",
  "tagline": "Docker Nut: the development environment, containerized.",
  "body": "### Wetting Your Appetite\r\nTired of hearing: \"works on my machine\"?  \r\nEver experienced headache to install libraries and dependencies?  \r\nEver had to deal with two incompatible versions of a program at once?  \r\nEver wished to try out a new language first, and install it only if it pleases you?  \r\nEver wished to develop for Linux when you use Mac OS or Windows?  \r\nEver wished to develop in Go from the folder of your choice?  \r\nEver wished to have a unified development tool, across all platforms, customizable to any languages?  \r\n\r\n### Nut\r\n**Nut** is a command line tool which offers a solution to common frustrations of developers. It hides the complexity of development environments, and extends them with customizable macros. Whether you develop in Swift, Go, Java, or C++, what you need is build/run/test the app. So just do it:\r\n\r\n    $ nut build\r\n    $ nut run\r\n    $ nut test\r\n\r\n**Nut** mounts the current folder in a [Docker](https://www.docker.com/) container, and executes commands on your behalf, according to the project configuration. The configuration is read from `nut.yml` file, in the current folder. You can choose the Docker image to use, declare volumes to mount, and define commands (called macros) such as *build*, *run*, and *test*.\r\n\r\nNut is in early stage of development. It has been tested on Ubuntu and on MacOS with *Docker for Mac*. Feedbacks and contributions to add features and to make Nut run on other systems are welcome (Windows, Docker Toolbox, etc).\r\n\r\n\r\n### Getting Nut\r\n#### Compile from source\r\n```bash\r\n# Download sources\r\ngit clone git@github.com:matthieudelaro/nut.git --recursive\r\n\r\n# 1 - Move to nut folder\r\ncd nut\r\n\r\n# 2 - Build Nut\r\n    # Build Nut for Linux, in a container (you don't need to install Go on your computer)\r\n    docker run -i -t --rm -v $PWD:/go/src/github.com/matthieudelaro/nut -w /go/src/github.com/matthieudelaro/nut golang:1.6 go build -o nut\r\n\r\n    # Build Nut for OSX, in a container (you don't need to install Go on your computer)\r\n    docker run -i -t --rm -v $PWD:/go/src/github.com/matthieudelaro/nut -w /go/src/github.com/matthieudelaro/nut golang:1.6 env GOOS=darwin GOARCH=amd64 go build -o nut\r\n\r\n    # Build Nut for Windows, in a container (you don't need to install Go on your computer)\r\n    docker run -i -t --rm -v $PWD:/go/src/github.com/matthieudelaro/nut -w /go/src/github.com/matthieudelaro/nut golang:1.6 env GOOS=windows GOARCH=amd64 go build -o nut\r\n\r\n# 3 - Run nut\r\n./nut\r\n\r\n# 4 - Optional: Add nut to your PATH\r\n    # Copy it in the path\r\n    sudo cp nut /usr/local/bin/nut # on linux and osx\r\n\r\n    # Or modify the path\r\n    echo \"PATH=`pwd`:\\$PATH\" >> ~/.bashrc  # on linux\r\n    echo \"PATH=`pwd`:\\$PATH\" >> ~/.bash_profile  # on osx\r\n```\r\n\r\n### Nut File Syntax\r\n#### Example\r\nHere is an example of `nut.yml` to develop in Go. You can generate a sample configuration with  :\r\n\r\n`nut --init`\r\n```yaml\r\n# nut.yml\r\nproject_name: nut\r\nenable_gui: yes # forward X11 to run graphical application from within the container\r\n                # On Ubuntu, depending on your config, you may need to run \"xhost+\" before running nut.\r\nprivileged: true # run container with --privileged flag\r\n\r\nbased_on: # configuration can be inherited from:\r\n  github: matthieudelaro/nutfile_go1.6 # a GitHub repository\r\n  nut_file_path: ../go1.5/nut.yml # a local file\r\n  # You can inherite either from GitHub or from a file, not both.\r\n  docker_image: golang:1.6 # a Docker image. Will override image set on GitHub\r\n\r\nmount: # declare folders to mount in the container\r\n  main: # give each folder any name that you like\r\n  - .               # this folder (from your computer) will be mounted as\r\n  - /go/src/project # this folder (in the container)\r\n\r\nmacros: # macros define operations that Nut can perform\r\n  build: # call this macro with \"nut build\"\r\n    usage: build the project\r\n    actions:  # a list of commands to run in the container\r\n    - go build -o nut\r\n    - echo Done\r\n  run: # call this macro with \"nut run\"\r\n    usage: run the project in the container\r\n    actions:\r\n    - ./nut\r\n  test:\r\n    usage: test the project\r\n    actions:\r\n    - go test\r\n\r\ncontainer_working_directory: /go/src/project # where macros will be executed\r\nsyntax_version: \"4\" # Nut evolves quickly ; its configuration file syntax as well.\r\n                    # So nut files are versioned to ensure backward compatibility.\r\n\r\n```\r\n\r\nHere are other instructive examples:\r\n- [Dynamic folder name](https://github.com/matthieudelaro/nutfile_go1.5/blob/master/nut.yml)\r\n- [GUI application](https://github.com/matthieudelaro/nut/blob/master/examples/geary/nut.yml)\r\n\r\n#### Guidelines\r\nNut aims to unify development tools, not to replace compilers.\r\nNut aims to unify development processes, not to expose language specific requirements.\r\n\r\nSo, when creating a `nut.yml` file, one should standard names for macros, such as:\r\n- build\r\n- run\r\n- test\r\n- debug\r\n- deploy\r\n\r\nAs opposed to:\r\n- javac (should be generalized with *build*)\r\n- make (duplicate of *build*)\r\n- do (hum... *Do* what?)\r\nThis will keep Nut easy to integrate in text editors and IDEs.\r\n\r\n### What the Nut???\r\n- build [Nut](https://github.com/matthieudelaro/nut/blob/master/nut.yml) within Nut (never installed Go, and never going to :)\r\n- build [Docker](https://github.com/matthieudelaro/nut/blob/master/examples/docker/nut.yml)\r\n- build and run [Caffe](https://github.com/matthieudelaro/nut/blob/master/examples/caffe/nut.yml) with `nut build`, `nut test`, `nut train-mnist`.\r\n- compile CUDA code on a Mac Book Air, which hasn't got any Nvidia GPU. Just `nut build`\r\n- test code in a whole infrastructure, by defining a macro running *docker-compose* in a container.\r\n- run linux [graphical applications](https://github.com/matthieudelaro/nut/blob/master/examples/geary/nut.yml) on your Mac:\r\n![Linux application on your Mac](https://camo.githubusercontent.com/b32c086f7da89f3365062f9a6a49b7f64377cb35/687474703a2f2f692e696d6775722e636f6d2f4b6650676d72322e676966)\r\n\r\n### Milestones\r\n- add support for GPU (--device)\r\n- add support for Windows\r\n- add support for *Docker Toolbox* on Mac\r\n- add support for port bindings\r\n- plugin for Sublime Text, to call `nut run`, `nut build`, and `nut test` from the editor.\r\n\r\n### Stay Tune\r\nWanna receive updates? Or share your thoughts? You can post an issue or follow me on [Twitter](https://twitter.com/matthieudelaro).\r\n\r\n### Authors and Contributors\r\n@matthieudelaro and @gdevillele",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}